<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css'/>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ==" crossorigin=""/>
  <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js" integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log==" crossorigin=""></script>
  <script src="/javascripts/socket.io-1.4.5.js"></script>
</head>
  <body>
    <p id="current_user" name="<%= login.adid %>">Welcome to <%= login.name %></p>
    <a style="float: left;" class="btn-flat-vertical-border" href="/seats/add">出席</a>
    <form style="float: left;" method="post" action="/seats/add">
      <input type="hidden" name="adid" value="<%= login.adid %>">
      <input type="hidden" name="number" value="在宅">
      <input type="submit" value="在宅" class="btn-flat-vertical-border">
    </form>
    <form id="exit" style="float: left;" method="post" action="/seats/delete">
      <input type="hidden" name="adid" value="<%= login.adid %>">
      <input type="submit" value="退勤" class="btn-flat-vertical-border">
    </form>
    <a class="btn-flat-vertical-border" href="/seats/index">座席一覧</a>
    <div id="map" style="width: 50%; height: 600px;"></div>
    <div id="homeworkerlist" style="width: 50%; height: 600px; position: absolute; right: 0px;"></div>
     <script>
      //マップデータの初期化
      var image = { url:'/images/template.PNG', width: 836, height: 596 };
      var bounds = L.latLngBounds([0, 0], [image.height, image.width]);
      var map = L.map('map', { crs: L.CRS.Simple, maxBounds: bounds.pad(1), zoom:0, maxZoom:5, minZoom:0});
      map.fitBounds(bounds);
      L.imageOverlay(image.url, bounds).addTo(map);

      //各種データの初期化
      var userdata = {};
      var seatdata = {};
      var seatinfodata = {};
      var leafletdata_current = {};
      var leafletdata_new = {};

      //サーバーからデータを取得＆画面更新
      updateAllData();

      var socket = io.connect("https://morning-sierra-54748.herokuapp.com");
      socket.on("connect", function(){
        console.log("connected");
        socket.json.emit("from_client_image", {
          message: "update"
        });
      });

      socket.on("from_server_image", function(data){
        updateAllData();
      });

      //デバッグ用
      function showClickEvent(e) {
        console.log('pixel (%s, %s) | LatLng [%s, %s] | geojson [%s, %s]', 
        e.containerPoint.x, e.containerPoint.y, 
        e.latlng.lat, e.latlng.lng,e.latlng.lng, e.latlng.lat );
      }

      function getUserData(){
        let xhr = new XMLHttpRequest();
        xhr.open('GET', "/getuser");
        xhr.send();
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4 && xhr.status === 200) {
            userdata = JSON.parse(xhr.responseText);
            console.log("getUserData is executed...");
            console.log(userdata);
            drawdata();
          }
        }
      }

      function getSeatData(){
        let xhr = new XMLHttpRequest();
        xhr.open('GET', "/getseat");
        xhr.send();
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4 && xhr.status === 200) {
            seatdata = JSON.parse(xhr.responseText);
            console.log("getSeatData is executed...");
            console.log(seatdata);

            //退勤ボタンの表示/非表示処理
            let current_user = document.getElementById("current_user").getAttribute("name");
            document.getElementById("exit").style.visibility = "hidden";
            for (let i=0; i<seatdata.length; i++) {
              if (seatdata[i].adid == current_user) {
                document.getElementById("exit").style.visibility = "visible";
                break;
              }
            }

            drawdata();
          }
        }
      }

      function getSeatInfoData(){
        let xhr = new XMLHttpRequest();
        xhr.open('GET', "/getseatinfo");
        xhr.send();
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4 && xhr.status === 200) {
            seatinfodata = JSON.parse(xhr.responseText);
            console.log("getSeatInfoData is executed...");
            console.log(seatinfodata);
            drawdata();
          }
        }
      }

      function updateAllData(){
        userdata = {};
        seatdata = {};
        seatinfodata = {};
        getUserData();
        getSeatData();
        getSeatInfoData();
      }

      function drawdata(){
        let current_user = "";
        if (userdata != {} && seatdata != {} && seatinfodata != {}) {
          if (convertData() == true) {
            removeDuplicates();
            map.remove();
            map = L.map('map', { crs: L.CRS.Simple, maxBounds: bounds.pad(1), zoom:0, maxZoom:5, minZoom:0});
            map.fitBounds(bounds);
            L.imageOverlay(image.url, bounds).addTo(map);
            map.on('click', showClickEvent);

            //現在ログイン中のユーザーを取得
            current_user = document.getElementById("current_user").getAttribute("name");

            //座席番号の表示
            for (let j=0; j<seatinfodata.length; j++) {
              L.marker([seatinfodata[j].x, seatinfodata[j].y]).addTo(map).bindTooltip(seatinfodata[j].number, {permanent: true, direction: 'center'}).openTooltip();
            }

            //マップ上にユーザーを表示
            for (let i=0; i<leafletdata_current.length; i++) {
              console.log(leafletdata_current[i]);
              if (leafletdata_current[i].number != "在宅") {
                if (current_user == leafletdata_current[i].adid) {
                  L.circle([leafletdata_current[i].x, leafletdata_current[i].y], {color: 'orange',radius: 35}).addTo(map).bindTooltip(leafletdata_current[i].name, {permanent: true, direction: 'center'}).openTooltip().bindPopup(leafletdata_current[i].adid);
                } else {
                  L.circle([leafletdata_current[i].x, leafletdata_current[i].y], {color: 'green',radius: 35}).addTo(map).bindTooltip(leafletdata_current[i].name, {permanent: true, direction: 'center'}).openTooltip().bindPopup(leafletdata_current[i].adid);
                }
              }
            }

            //在宅者リストを更新
            updateHomeWorker();
          }
        }
      }

      function convertData(){
        let data = [];
        if (userdata.length != undefined && seatdata.length != undefined && seatinfodata.length != undefined) {
          if (seatdata.length == 0) {
            leafletdata_new = data;
            return true;
          }
          for (let i=0; i<seatdata.length; i++) {
            let temp = {};
            temp.adid = seatdata[i].adid;
            temp.number = seatdata[i].number;
            for (let j=0; j<userdata.length; j++) {
              if (userdata[j].adid == seatdata[i].adid) {
                temp.name = userdata[j].name;
                break;
              }
            }
            for (let k=0; k<seatinfodata.length; k++) {
              if (seatinfodata[k].number == seatdata[i].number) {
                temp.x = seatinfodata[k].x;
                temp.y = seatinfodata[k].y;
                break;
              }
            }
            data[i] = temp;
            if (i == seatdata.length - 1) {
              leafletdata_new = data;
              return true;
            }
          }
        } else {
          return false;
        }
      }

      function removeDuplicates(){
        let checkArray = {};
        let resultData = [];
        for (let i=0; i<leafletdata_new.length; i++){
          if (leafletdata_new[i].number != "在宅") {
            checkArray[leafletdata_new[i].number] = leafletdata_new[i].adid;
          }
        }
        for (let i=0; i<leafletdata_new.length; i++){
          if (leafletdata_new[i].number != "在宅") {
            if (leafletdata_new[i].adid == checkArray[leafletdata_new[i].number]) {
              resultData[resultData.length] = leafletdata_new[i];
            } else {
              let xhr = new XMLHttpRequest();
              xhr.open('POST', "/seats/delete");
              xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
              xhr.send("adid=" + leafletdata_new[i].adid + "&number=" + leafletdata_new[i].number);
              xhr.onreadystatechange = function() {
                if(xhr.readyState === 4 && xhr.status === 200) {
                  console.log("Duplicates are deleted...");
                }
              }
            }
          } else {
            resultData[resultData.length] = leafletdata_new[i];
          }
        }
        leafletdata_current = resultData;
      }

      function updateHomeWorker(){
        let checkArray = [];
        let values = [];
        let homeworkerlist = document.getElementById("homeworkerlist");
        let current_user = document.getElementById("current_user").getAttribute("name");

        //現在表示中の内容を削除
        while(homeworkerlist.firstChild){
          homeworkerlist.removeChild(homeworkerlist.firstChild);
        }

        // map要素の位置座標を取得
        let mapRect = document.getElementById("map").getBoundingClientRect() ;

        // 画面の上端から、要素の上端までの距離
        let top = window.pageYOffset + mapRect.top ;

        // 在宅者リストの位置を補正
        homeworkerlist.style.top = top + "px";

        for (let i=0; i<leafletdata_current.length; i++) {
          if (leafletdata_current[i].number == "在宅") {
            checkArray[leafletdata_current[i].adid] = leafletdata_current[i].name;
          }
        }

        values = Object.values(checkArray);
        if (values.length > 0) {
          let newElement = document.createElement("p");
          let newContent = document.createTextNode("在宅者リスト");
          newElement.appendChild(newContent);
          newElement.setAttribute("id","homeworkerlisttitle");
          homeworkerlist.appendChild(newElement);

          let newTable = document.createElement("ul");
          newTable.setAttribute("class","homeworker");
          for (let i=0; i<values.length; i++) {
            let newElement = document.createElement("li");
            let newContent = document.createTextNode(values[i]);
            newElement.appendChild(newContent);
            if (checkArray[current_user] == values[i]) {
              newElement.style.backgroundColor = "#FFCC99";
            }
            newTable.appendChild(newElement);
          }
          homeworkerlist.appendChild(newTable);
        }
      }

      function resizeWindow(){
        // map要素の位置座標を取得
        let mapRect = document.getElementById("map").getBoundingClientRect() ;

        // 画面の上端から、要素の上端までの距離
        let top = window.pageYOffset + mapRect.top ;

        // 在宅者リストの位置を補正
        homeworkerlist.style.top = top + "px";
      }
      window.onresize = resizeWindow;
    </script>
  </body>
</html>
